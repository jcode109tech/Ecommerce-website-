import React, { useState, useEffect } from 'react';
import API from '../../config/axiosConfig';
// import '../../style/Product.css'
import axios from 'axios';
import Navbar from '../Navbar';

const Settings = () => {
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [newProduct, setNewProduct] = useState({
    title: '',
    description: '',
    price: '',
    quantity: '',
    isPurchased: false,
    categoryId: '',
    imgUrl: ''
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewProduct({
      ...newProduct,
      [name]: value
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(`${API}/products/createproduct`, newProduct);
      const createdProduct = response.data;
      setProducts([...products, createdProduct]);
      setNewProduct({
        title: '',
        description: '',
        price: '',
        quantity: '',
        isPurchased: false,
        categoryId: '',
        imgUrl: ''
      });
      alert('Product added successfully!');
    } catch (error) {
      console.error('Error adding product:', error);
      alert('Failed to add product. Please check console for details.');
    }
  };

  const ProductCard = ({ product }) => {
    return (
      <div className="product-card">
        <img src={product.imgUrl} alt={product.title} className="product-image" />
        <h2 className="product-title">{product.title}</h2>
        <p className="product-description">{product.description}</p>
        <p className="product-price">${product.price}</p>
      </div>
    );
  };

  const ProductList = ({ products }) => {
    return (
      <div className="product-grid">
        {products.map(product => (
          <ProductCard key={product._id} product={product} />
        ))}
      </div>
    );
  };

//   useEffect(() => {
//     const fetchProducts = async () => {
//       try {
//         const response = await fetch(`${API}/products`);
//         const data = await response.json();
//         setProducts(data);
//       } catch (error) {
//         console.error('Error fetching products:', error);
//       }
//     };

//     const fetchCategories = async () => {
//       try {
//         const response = await fetch(`${API}/categorys/categories`);
//         const data = await response.json();
//         setCategories(data);
//       } catch (error) {
//         console.error('Error fetching categories:', error);
//       }
//     };

//     fetchProducts();
//     fetchCategories();
//   }, []);

  const handleSearch = async () => {
    if (selectedCategory) {
      try {
        const response = await fetch(`${API}/products?category=${selectedCategory}`);
        const data = await response.json();
        setProducts(data);
      } catch (error) {
        console.error('Error searching products:', error);
      }
    }
  };

  return (
    <>
    <Navbar />
    <div className="container">
      <div className="flex">
        <input
          type="text"
          value={selectedCategory}
          onChange={(e) => setSelectedCategory(e.target.value)}
          className="input-field"
          placeholder="Search by category"
        />
        <button onClick={handleSearch} className="button">Search</button>
      </div>

      <form onSubmit={handleSubmit} className="form">
        <div className="form-field">
          <label htmlFor="title" className="form-label">Title</label>
          <input
            type="text"
            id="title"
            name="title"
            value={newProduct.title}
            onChange={handleInputChange}
            className="form-input"
            required
          />
        </div>
        <div className="form-field">
          <label htmlFor="description" className="form-label">Description</label>
          <textarea
            id="description"
            name="description"
            value={newProduct.description}
            onChange={handleInputChange}
            className="form-input"
            required
            />
        </div>
        <div className="form-field">
          <label htmlFor="price" className="form-label">Price ($)</label>
          <input
            type="number"
            id="price"
            name="price"
            value={newProduct.price}
            onChange={handleInputChange}
            className="form-input"
            required
            />
        </div>
        <div className="form-field">
          <label htmlFor="quantity" className="form-label">Quantity</label>
          <input
            type="number"
            id="quantity"
            name="quantity"
            value={newProduct.quantity}
            onChange={handleInputChange}
            className="form-input"
          />
        </div>
        <div className="form-field">
          <label htmlFor="categoryId" className="form-label">Category ID</label>
          <input
            type="text"
            id="categoryId"
            name="categoryId"
            value={newProduct.categoryId}
            onChange={handleInputChange}
            className="form-input"
            required
            />
        </div>
        <div className="form-field">
          <label htmlFor="imgUrl" className="form-label">Image URL</label>
          <input
            type="text"
            id="imgUrl"
            name="imgUrl"
            value={newProduct.imgUrl}
            onChange={handleInputChange}
            className="form-input"
            required
          />
        </div>
        <button type="submit" className="button">Add Product</button>
      </form>

      <ProductList products={products} />
    </div>
    </>
  );
};

export default Settings;
